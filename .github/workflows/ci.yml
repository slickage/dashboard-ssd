name: CI

env:
  OTP_VERSION: '27.1.2'
  ELIXIR_VERSION: '1.18.0'
  MIX_ENV: test
  COVERALLS_MINIMUM_COVERAGE: 90

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch:
    inputs:
      deploy_docs:
        description: 'Deploy docs (override branch restriction)'
        default: 'false'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dashboard_ssd_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --tmpfs /var/lib/postgresql/data:rw
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup BEAM
        id: beam
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Hex / Rebar
        uses: actions/cache@v4
        with:
          path: |
            ~/.hex
            ~/.cache/rebar3
          key: ${{ runner.os }}-hex-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
      - name: Cache Mix deps
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
      - name: Cache Mix build
        uses: actions/cache@v4
        with:
          path: |
            _build/test
            _build/dev
          key: ${{ runner.os }}-build-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock', 'config/*.exs', 'config/**/*.exs') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-
      - name: Cache PLTs
        uses: actions/cache@v4
        with:
          path: priv/plts
          key: ${{ runner.os }}-plts-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
      - name: Cache assets
        id: assets-cache
        uses: actions/cache@v4
        with:
          path: |
            assets/node_modules
            priv/static
          key: ${{ runner.os }}-assets-${{ hashFiles('assets/package-lock.json', 'assets/yarn.lock', 'assets/mix.exs', 'assets/package.json') }}
          restore-keys: |
            ${{ runner.os }}-assets-
      - name: Install dependencies
        run: |
          mix deps.get
          MIX_ENV=dev mix deps.get
      - name: Security | Hex audit
        run: mix hex.audit
      - name: Security | deps audit
        run: MIX_ENV=dev mix deps.audit
      - name: Security | hex outdated
        run: MIX_ENV=dev mix hex.outdated || true
      - name: Security | gitleaks
        run: ./scripts/secret_scan.sh
      - name: Security | Sobelow
        env:
          MIX_ENV: dev
          SOBELOW_CONFIDENCE: medium
        run: mix sobelow -i Config.HTTPS --skip --exit
      - name: Quality | Format
        run: mix format --check-formatted
      - name: Quality | Credo
        run: mix credo --strict
      - name: Correctness | Compile (test warnings)
        run: mix compile --force --warnings-as-errors
      - name: Infrastructure | Assets
        env:
          MIX_ENV: dev
        run: |
          if [ "${{ steps.assets-cache.outputs.cache-hit }}" != 'true' ]; then
            mix assets.setup
          fi
          mix assets.build
      - name: Infrastructure | Prepare DB
        run: |
          mix ecto.create
          mix ecto.migrate
      - name: Correctness | Tests w/ coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          EXUNIT_MAX_CASES: 20
        run: mix coveralls.multiple --type local --type github
      - name: Correctness | Dialyzer PLT
        env:
          MIX_ENV: dev
        run: mix dialyzer --plt
      - name: Correctness | Dialyzer
        env:
          MIX_ENV: dev
        run: mix dialyzer --format short
      - name: Correctness | Doctor
        env:
          MIX_ENV: dev
        run: mix doctor --summary --raise
  release:
    needs: check
    outputs:
      # export release info from semantic release action
      # for image build/push and CD update
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_git_tag: ${{ steps.semantic.outputs.new_release_git_tag }}
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # run semantic release action and export statuses
      - name: Semantic release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/changelog
            @semantic-release/git
            @semantic-release/github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  debug-release:
    needs: release
    env:
      NEW_RELEASE_PUBLISHED: ${{ needs.release.outputs.new_release_published }}
      NEW_RELEASE_GIT_TAG: ${{ needs.release.outputs.new_release_git_tag }}
    steps:
      - name: Show release variables
        run: |
          echo NEW_RELEASE_PUBLISHED: ${{ env.NEW_RELEASE_PUBLISHED }}
          echo NEW_RELEASE_GIT_TAG: ${{ env.NEW_RELEASE_GIT_TAG }}
  docs-pages:
    needs: release
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_docs == 'true')) && ${{ needs.release.outputs.new_release_published }} == 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.release.outputs.new_release_git_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # sync (include release)
      - name: Sync to latest
        run: |
          git fetch origin ${{ env.VERSION }}
          git checkout ${{ env.VERSION }}
          git pull origin ${{ env.VERSION }}
      - name: Setup BEAM
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{ env.OTP_VERSION }}
          elixir-version: ${{ env.ELIXIR_VERSION }}
      - name: Cache Mix deps
        uses: actions/cache@v4
        with:
          path: deps
          key: ${{ runner.os }}-deps-${{ env.ELIXIR_VERSION }}-${{ env.OTP_VERSION }}-${{ hashFiles('**/mix.lock') }}
      - name: Install dependencies
        env:
          MIX_ENV: dev
        run: mix deps.get
      - name: Build docs
        env:
          MIX_ENV: dev
        run: mix docs
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: doc
  deploy-pages:
    permissions:
      pages: write
      id-token: write
    needs: docs-pages
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_docs == 'true')) && ${{ needs.release.outputs.new_release_published }} == 'true'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
  build:
    permissions:
      contents: read
      id-token: write
      packages: write
    needs: release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && ${{ needs.release.outputs.new_release_published }} == 'true'
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.release.outputs.new_release_git_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # sync (include release)
      - name: Sync to latest
        run: |
          git fetch origin ${{ env.VERSION }}
          git checkout ${{ env.VERSION }}
          git pull origin ${{ env.VERSION }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.release.outputs.new_release_git_tag }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.release.outputs.new_release_git_tag }}
      REPO: ${{ github.repository }}
    # if there was a new version released
    # checkout gitops repo
    # update gitops image
      # from ghcr.io, using semantic release "new_release_git_tag" tag
    # push change to gitops repo
    if: ${{ needs.release.outputs.new_release_published }} == 'true'
    steps:
      - name: Checkout GitOps repo
        id: checkout-gitops
        uses: actions/checkout@v4
        with:
          # (gitops repo)
          repository: slickage/dashboard_gitops
          # path to use the repo within this workflow
          path: dashboard_gitops_path
          # gitops repo deploy private id_ed25519 key
          ssh-key: ${{ secrets.GITOPS_DEPLOY_KEY }}
      - name: Update stable deployment image
        if: startsWith(${{ env.VERSION }}, 'v') && !contains(${{ env.VERSION }}, '-beta')
        id: gitops-stable
        run: |
          sed -i "s|\(image:\s*ghcr.io/${{ env.REPO }}:\).*|\1${{ env.VERSION }}|" dashboard_gitops_path/apps/dashboard/deployment.yaml
      # - name: Update beta deployment image
      #   if: startsWith(${{ env.VERSION }}, 'v') && contains(${{ env.VERSION }}, '-beta')
      #   id: gitops-beta
      #   run: |
      #     sed -i "s|\(image:\s*ghcr.io/${{ env.REPO }}:\).*|\1${{ env.VERSION }}|" dashboard_gitops_path/apps/dashboard/deployment.yaml

      - name: Commit and push
        run: |
          cd dashboard_gitops_path
          git config user.name "GitHub Actions"
          git config user.email "boka@slickage.com"
          git commit -am "ci(${{ env.REPO }}): Update image to ${{ env.VERSION }}"
          git push
